const CACHE_NAME = 'trail-finder-cache-v1';
const urlsToCache = [
  '/',
  'index.html',
  'index.css',
];

// Install event: cache the app shell
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Opened cache');
        // Use addAll to fetch and cache all URLs.
        // If any fetch fails, the installation fails.
        return cache.addAll(urlsToCache);
      })
      .catch(err => {
        console.error('Failed to cache', err);
      })
  );
});

// Fetch event: serve from cache, fallback to network, and cache new requests
self.addEventListener('fetch', event => {
  // We only want to handle GET requests.
  if (event.request.method !== 'GET') {
    return;
  }

  event.respondWith(
    caches.open(CACHE_NAME).then(cache => {
      return cache.match(event.request).then(response => {
        // Return response from cache if available.
        // Otherwise, fetch from network, cache it, and then return the response.
        const fetchPromise = fetch(event.request).then(networkResponse => {
          // Check if we received a valid response
          const shouldCache = networkResponse.status === 200 && (networkResponse.type === 'basic' || networkResponse.type === 'cors');
          if (shouldCache) {
            // IMPORTANT: Clone the response. A response is a stream
            // and because we want the browser to consume the response
            // as well as the cache consuming the response, we need
            // to clone it so we have two streams.
            cache.put(event.request, networkResponse.clone());
          }
          return networkResponse;
        });

        // Return the cached response if available, otherwise wait for the network response.
        return response || fetchPromise;
      });
    })
  );
});

// Activate event: clean up old caches
self.addEventListener('activate', event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});